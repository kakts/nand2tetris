// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    
    // for zx
    Mux16(a = x, b[0..15] = false, sel = zx, out = zdx);
    // for nx
    Not16(in = zdx, out = notx);
    Mux16(a = zdx, b = notx, sel = nx, out = zdnx);

    // for zy
    Mux16(a = y, b[0..15] = false, sel = zy, out = zdy);
    // for ny
    Not16(in = zdy, out = noty);
    Mux16(a = zdy, b = noty, sel = ny, out = zdny);

    // x & y
    And16(a = zdnx, b = zdny, out = resand);
    // x + y
    Add16(a = zdnx, b = zdny, out = resadd);

    // out
    Mux16(a = resand, b = resadd, sel = f, out = fout);

    // no
    Not16(in= fout, out=fnout);
    Mux16(a=fout, b=fnout, sel=no, out=fout2);
    
    

    // zr
    Or16Way(in = fout2, out = oo);
    Not(in = oo, out = zr);
    // ng

    // negative
    And16(a[0..15] = true, b = fout2, out[15] = ng, out[0..14]=drop);

    Or16(a= fout2, b[0..15]=false, out=out);
}